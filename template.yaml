AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  CreateTables:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Set to false to use existing tables'

  ExistingTracksTableName:
    Type: String
    Default: 'music-chart-tracks'
    Description: 'Name of existing tracks table (if CreateTables is false)'

  ExistingPlaylistsTableName:
    Type: String
    Default: 'music-chart-playlists'
    Description: 'Name of existing playlists table (if CreateTables is false)'

Conditions:
  ShouldCreateTables: !Equals [!Ref CreateTables, 'true']

Globals:
  Function:
    Environment:
      Variables:
        TRACKS_TABLE: !If
          - ShouldCreateTables
          - !Ref TracksTable
          - !Ref ExistingTracksTableName
        PLAYLISTS_TABLE: !If
          - ShouldCreateTables
          - !Ref PlaylistsTable
          - !Ref ExistingPlaylistsTableName
        PLAYLISTS_BUCKET: !Ref PlaylistsBucket
        NEW_TRACKS_TOPIC_ARN: !Ref NewTracksQueue

Resources:
  # DynamoDB Table for storing tracks
  TracksTable:
    Type: AWS::DynamoDB::Table
    Condition: ShouldCreateTables
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub "${AWS::StackName}-tracks"
      AttributeDefinitions:
        - AttributeName: track_id
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      KeySchema:
        - AttributeName: track_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: created-at-index
          KeySchema:
            - AttributeName: created_at
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # DynamoDB Table for storing playlists
  PlaylistsTable:
    Type: AWS::DynamoDB::Table
    Condition: ShouldCreateTables
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub "${AWS::StackName}-playlists"
      AttributeDefinitions:
        - AttributeName: playlist_id
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      KeySchema:
        - AttributeName: playlist_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: created-at-index
          KeySchema:
            - AttributeName: created_at
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # S3 Bucket for storing scraped playlists
  PlaylistsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-playlists-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30

  # S3 Notification Configuration for Chart Processor
  PlaylistsBucketNotification:
    Type: Custom::S3Notification
    Properties:
      ServiceToken: !GetAtt ChartProcessorFunction.Arn
      BucketName: !Ref PlaylistsBucket
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt ChartProcessorFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .json

  # SNS Topic for new tracks queue
  NewTracksQueue:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${AWS::StackName}-new-tracks"
      DisplayName: "New Tracks Processing Queue"

  # Database service function
  DatabaseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: database
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Timeout: 30
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TracksTable
      Events:
        CreateTrack:
          Type: Api
          Properties:
            Path: /tracks
            Method: post
        GetTrack:
          Type: Api
          Properties:
            Path: /tracks/{track_id}
            Method: get
        GetTracks:
          Type: Api
          Properties:
            Path: /tracks
            Method: get
        UpdateTrack:
          Type: Api
          Properties:
            Path: /tracks/{track_id}
            Method: put

  YoutubeMusicSearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ytmusic
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Timeout: 10
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TracksTable

  BeatportScraperFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: scraper
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Timeout: 60
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref PlaylistsBucket
      Environment:
        Variables:
          USER_AGENT: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
      Events:
        ScrapeTrigger:
          Type: Api
          Properties:
            Path: /scrape
            Method: get

  # YouTube Playlist Creation Function
  YoutubePlaylistFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ytplaylist
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Timeout: 60
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlaylistsTable
        - SSMParameterReadPolicy:
            ParameterName: /youtube/*
      Events:
        CreatePlaylist:
          Type: Api
          Properties:
            Path: /playlists
            Method: post

  # Chart Processor Function
  ChartProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: chart-processor
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Timeout: 300
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TracksTable
        - S3ReadPolicy:
            BucketName: !Ref PlaylistsBucket
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt NewTracksQueue.TopicName

  # Lambda permission for S3 to invoke the chart processor
  ChartProcessorS3Permission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ChartProcessorFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:aws:s3:::${PlaylistsBucket}"

Outputs:
  ApiGatewayEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  TracksTableName:
    Description: "DynamoDB table name for tracks"
    Value: !Ref TracksTable
  PlaylistsBucketName:
    Description: "S3 bucket name for storing scraped playlists"
    Value: !Ref PlaylistsBucket
  NewTracksTopicArn:
    Description: "SNS topic ARN for new tracks processing queue"
    Value: !Ref NewTracksQueue
