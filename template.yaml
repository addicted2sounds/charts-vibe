AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  CreateTables:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Set to false to use existing tables'

  ExistingTracksTableName:
    Type: String
    Default: 'charts-vibe-tracks'
    Description: 'Name of existing tracks table (if CreateTables is false)'

  ExistingPlaylistsTableName:
    Type: String
    Default: 'charts-vibe-playlists'
    Description: 'Name of existing playlists table (if CreateTables is false)'

  ExistingJobsTableName:
    Type: String
    Default: 'charts-vibe-jobs'
    Description: 'Name of existing jobs table (if CreateTables is false)'

  # Controls for Beatport scraper weekly schedule
  EnableBeatportScrapeSchedule:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Enable weekly EventBridge trigger for Beatport scraper'

  BeatportScrapeScheduleExpression:
    Type: String
    Default: 'cron(0 6 ? * MON *)'
    Description: 'EventBridge schedule expression for Beatport scraper (UTC). Default: every Monday 06:00 UTC'

Conditions:
  ShouldCreateTables: !Equals [!Ref CreateTables, 'true']
  EnableBeatportSchedule: !Equals [!Ref EnableBeatportScrapeSchedule, 'true']

Globals:
  Function:
    Runtime: python3.9
    Architectures:
      - x86_64
    Environment:
      Variables:
        TRACKS_TABLE: !If
          - ShouldCreateTables
          - !Ref TracksTable
          - !Ref ExistingTracksTableName
        PLAYLISTS_TABLE: !If
          - ShouldCreateTables
          - !Ref PlaylistsTable
          - !Ref ExistingPlaylistsTableName
        JOBS_TABLE: !If
          - ShouldCreateTables
          - !Ref JobsTable
          - !Ref ExistingJobsTableName
        PLAYLISTS_BUCKET: !Ref PlaylistsBucket
        NEW_TRACKS_TOPIC_ARN: !Ref NewTracksQueue
        YOUTUBE_MUSIC_PROCESSING_QUEUE_URL: !Ref YouTubeMusicProcessingQueue

Resources:
  # CloudWatch Log Groups with 14 days retention for cost optimization
  DatabaseFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-DatabaseFunction"
      RetentionInDays: 14

  YoutubeMusicSearchFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-YoutubeMusicSearchFunction"
      RetentionInDays: 14

  BeatportScraperFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-BeatportScraperFunction"
      RetentionInDays: 14

  YoutubePlaylistFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-YoutubePlaylistFunction"
      RetentionInDays: 14

  ChartProcessorFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-ChartProcessorFunction"
      RetentionInDays: 14

  # DynamoDB Table for storing tracks
  TracksTable:
    Type: AWS::DynamoDB::Table
    Condition: ShouldCreateTables
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub "${AWS::StackName}-tracks"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: track_id
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      KeySchema:
        - AttributeName: track_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: created-at-index
          KeySchema:
            - AttributeName: created_at
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # DynamoDB Table for storing playlists
  PlaylistsTable:
    Type: AWS::DynamoDB::Table
    Condition: ShouldCreateTables
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub "${AWS::StackName}-playlists"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: playlist_id
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      KeySchema:
        - AttributeName: playlist_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: created-at-index
          KeySchema:
            - AttributeName: created_at
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # DynamoDB Table for tracking jobs (expected/processed counts)
  JobsTable:
    Type: AWS::DynamoDB::Table
    Condition: ShouldCreateTables
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub "${AWS::StackName}-jobs"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: job_id
          AttributeType: S
      KeySchema:
        - AttributeName: job_id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_IMAGE # optional

  # S3 Bucket for storing scraped playlists
  PlaylistsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-playlists"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30



  # SNS Topic for new tracks queue
  NewTracksQueue:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${AWS::StackName}-new-tracks"
      DisplayName: "New Tracks Processing Queue"

  # SQS Queue for YouTube Music processing
  YouTubeMusicProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-youtube-music-processing"
      VisibilityTimeout: 180  # було 60
      MessageRetentionPeriod: 1209600  # 14 days
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt YouTubeMusicProcessingDLQ.Arn
        maxReceiveCount: 3

  # Dead Letter Queue for failed YouTube Music processing
  YouTubeMusicProcessingDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-youtube-music-processing-dlq"
      MessageRetentionPeriod: 1209600  # 14 days

  # SQS Queue Policy to allow SNS to send messages
  YouTubeMusicProcessingQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref YouTubeMusicProcessingQueue
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt YouTubeMusicProcessingQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref NewTracksQueue

  # SNS Subscription to SQS
  NewTracksToYouTubeMusicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref NewTracksQueue
      Protocol: sqs
      Endpoint: !GetAtt YouTubeMusicProcessingQueue.Arn

  # Database service function
  DatabaseFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-DatabaseFunction"
      CodeUri: database
      Handler: app.lambda_handler
      Runtime: python3.11
      Timeout: 30
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TracksTable
      Events:
        CreateTrack:
          Type: Api
          Properties:
            Path: /tracks
            Method: post
        GetTrack:
          Type: Api
          Properties:
            Path: /tracks/{track_id}
            Method: get
        GetTracks:
          Type: Api
          Properties:
            Path: /tracks
            Method: get
        UpdateTrack:
          Type: Api
          Properties:
            Path: /tracks/{track_id}
            Method: put
    DependsOn: DatabaseFunctionLogGroup

  YoutubeMusicSearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-YoutubeMusicSearchFunction"
      CodeUri: ytmusic
      Handler: app.lambda_handler
      Runtime: python3.11
      Timeout: 60
      ReservedConcurrentExecutions: 2   # стримує квоти YouTube і витрати
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !If
              - ShouldCreateTables
              - !Ref TracksTable
              - !Ref ExistingTracksTableName
        - DynamoDBCrudPolicy:
            TableName: !If
              - ShouldCreateTables
              - !Ref JobsTable
              - !Ref ExistingJobsTableName
        - SQSPollerPolicy:
            QueueName: !GetAtt YouTubeMusicProcessingQueue.QueueName
        - Statement:          # дозвіл кидати події про завершення
            Effect: Allow
            Action: events:PutEvents
            Resource: "*"
      Environment:
        Variables:
          JOBS_TABLE: !If
            - ShouldCreateTables
            - !Ref JobsTable
            - !Ref ExistingJobsTableName
          EVENT_BUS_NAME: default
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt YouTubeMusicProcessingQueue.Arn
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 5
    DependsOn: YoutubeMusicSearchFunctionLogGroup

  BeatportScraperFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-BeatportScraperFunction"
      CodeUri: scraper
      Handler: app.lambda_handler
      Runtime: python3.11
      Timeout: 60
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref PlaylistsBucket
      Environment:
        Variables:
          USER_AGENT: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
      Events:
        ScrapeTrigger:
          Type: Api
          Properties:
            Path: /scrape
            Method: get
        WeeklyScrape:
          Type: Schedule
          Properties:
            Name: !Sub "${AWS::StackName}-beatport-weekly"
            Description: 'Weekly Beatport scraper trigger via EventBridge'
            Schedule: !Ref BeatportScrapeScheduleExpression
            Enabled: !If [EnableBeatportSchedule, true, false]
            Input: '{"trigger":"eventbridge","source":"beatport","frequency":"weekly"}'
    DependsOn: BeatportScraperFunctionLogGroup

  # YouTube Playlist Creation Function
  YoutubePlaylistFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-YoutubePlaylistFunction"
      CodeUri: ytplaylist
      Handler: app.lambda_handler
      Runtime: python3.11
      Timeout: 60
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !If
              - ShouldCreateTables
              - !Ref PlaylistsTable
              - !Ref ExistingPlaylistsTableName
        - DynamoDBCrudPolicy:
            TableName: !If
              - ShouldCreateTables
              - !Ref TracksTable
              - !Ref ExistingTracksTableName
        - DynamoDBCrudPolicy:
            TableName: !If
              - ShouldCreateTables
              - !Ref JobsTable
              - !Ref ExistingJobsTableName
        - S3ReadPolicy:
            BucketName: !Ref PlaylistsBucket
        - SSMParameterReadPolicy:
            ParameterName: /youtube/*
      Events:
        CreatePlaylist:
          Type: Api
          Properties:
            Path: /playlists
            Method: post
    DependsOn: YoutubePlaylistFunctionLogGroup

  # EventBridge rule for auto-starting playlist creation after job completion
  JobCompletedRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source: ["music-search.orchestrator"]
        detail-type: ["Job Completed"]
      Targets:
        - Arn: !GetAtt YoutubePlaylistFunction.Arn
          Id: CreatePlaylistTarget

  # Permission for EventBridge to invoke playlist function
  PermissionForEventsToInvokePlaylist:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref YoutubePlaylistFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt JobCompletedRule.Arn

  # Dead Letter Queue for playlist processing failures
  PlaylistProcessingDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-playlist-processing-dlq"
      MessageRetentionPeriod: 1209600  # 14 days

  # Chart Processor Function
  ChartProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-ChartProcessorFunction"
      CodeUri: chart-processor
      Handler: app.lambda_handler
      Runtime: python3.11
      Timeout: 300
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !If
              - ShouldCreateTables
              - !Ref TracksTable
              - !Ref ExistingTracksTableName
        - DynamoDBCrudPolicy:
            TableName: !If
              - ShouldCreateTables
              - !Ref JobsTable
              - !Ref ExistingJobsTableName
        - S3ReadPolicy:
            BucketName: !Ref PlaylistsBucket
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt NewTracksQueue.TopicName
      Events:
        FromS3:
          Type: S3
          Properties:
            Bucket: !Ref PlaylistsBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .json
    DependsOn: ChartProcessorFunctionLogGroup


Outputs:
  ApiGatewayEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  TracksTableName:
    Description: "DynamoDB table name for tracks"
    Value: !If
      - ShouldCreateTables
      - !Ref TracksTable
      - !Ref ExistingTracksTableName
  JobsTableName:
    Condition: ShouldCreateTables
    Description: "DynamoDB table name for jobs"
    Value: !Ref JobsTable
  PlaylistsBucketName:
    Description: "S3 bucket name for storing scraped playlists"
    Value: !Ref PlaylistsBucket
  NewTracksTopicArn:
    Description: "SNS topic ARN for new tracks processing queue"
    Value: !Ref NewTracksQueue
  YouTubeMusicProcessingQueueArn:
    Description: "SQS queue ARN for YouTube Music processing"
    Value: !GetAtt YouTubeMusicProcessingQueue.Arn
  YouTubeMusicProcessingQueueUrl:
    Description: "SQS queue URL for YouTube Music processing"
    Value: !Ref YouTubeMusicProcessingQueue
  YouTubeMusicProcessingDLQArn:
    Description: "SQS dead letter queue ARN for YouTube Music processing"
    Value: !GetAtt YouTubeMusicProcessingDLQ.Arn
  PlaylistProcessingDLQArn:
    Description: "SQS dead letter queue ARN for playlist processing failures"
    Value: !GetAtt PlaylistProcessingDLQ.Arn
  OrchestratorStatus:
    Description: "Status of the simple orchestrator setup"
    Value: "Job counter orchestrator enabled - auto playlist creation on job completion"
